package lib280.tree;

import lib280.base.LinearIterator280;
import lib280.exception.AfterTheEnd280Exception;
import lib280.exception.ContainerEmpty280Exception;
import lib280.exception.NoCurrentItem280Exception;

public class ArrayedBinaryTreeIterator280<I> extends ArrayedBinaryTreePosition280 implements LinearIterator280<I> {

	// This is a reference to the tree that created this iterator object.
	ArrayedBinaryTree280<I> tree;
	
	// An integer that represents the cursor position is inherited from
	// ArrayedBinaryTreePosition280.


	/**
	 * Create a new iterator from a given heap.
	 * @param t The heap for which to create a new iterator.
	 */
	public ArrayedBinaryTreeIterator280(ArrayedBinaryTree280<I> t) {
		super(t.currentNode);
		this.tree = t;
	}

	// TODO/DONE - Complete the following methods which are required by LinearIterator280<I>
	// Note that these method stubs were automatically generated by IntelliJ and every one of them
	// requires your attention.

	/**
	 * Move the cursor to node before the first node of the tree
	 *
	 */
	@Override
	public boolean before() {
		return tree.currentNode == 0;
	}

	/**
	 * Move the cursor to node after the last node of the tree
	 *
	 */
	@Override
	public boolean after() {
		return tree.currentNode > tree.count;
	}

	@Override
	public void goForth() throws AfterTheEnd280Exception {
		if(this.after()) throw new AfterTheEnd280Exception("Cannot advance cursor in the after position.");
		tree.currentNode++;
	}
	/**
	 * Move the cursor to the next node
	 * @throws AfterTheEnd280Exception when trying to access nodes beyond capacity
	 *
	 */
	@Override
	public void goFirst() throws ContainerEmpty280Exception {
		if( tree.isEmpty() ) throw new ContainerEmpty280Exception("Cannot move to first item of an empty tree.");
		tree.currentNode = 1;
	}
	/**
	 * Move the cursor the node before the first node or to node 0
	 *
	 */
	@Override
	public void goBefore() {
		tree.currentNode = 0;
	}
	/**
	 * Move the cursor the node beyond tree's capacity
	 *
	 */
	@Override
	public void goAfter() {
		tree.currentNode = tree.count + 1;
	}
	/**
	 * Obtains item pointed by cursor
	 *
	 *
	 */
	@Override
	public I item() throws NoCurrentItem280Exception {
		if(!tree.itemExists() ) throw new NoCurrentItem280Exception();
		else return tree.items[currentNode];
	}
	/**
	 * Checks if item cursor is pointing to exists
	 *
	 *  @return true if there is item present and false otherwise
	 */
	@Override
	public boolean itemExists() {
		return tree.count > 0 && (tree.currentNode > 0 && tree.currentNode <= tree.count);
	}


}
